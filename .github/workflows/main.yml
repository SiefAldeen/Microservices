name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  ACR_NAME: pwctask
  ACR_LOGIN_SERVER: pwctask.azurecr.io
  IMAGE_NAME: microservice
  AKS_CLUSTER_NAME: pwctask-aks
  AKS_RESOURCE_GROUP: Microservices
  DEPLOYMENT_NAME: microservice
  NAMESPACE: default

jobs:
  build-push-deploy:
    name: Build, Push & Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get latest version from ACR
        id: get-version
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          TAGS=$(az acr repository show-tags \
            --name ${{ env.ACR_NAME }} \
            --repository ${{ env.IMAGE_NAME }} \
            --orderby time_desc \
            --output tsv 2>/dev/null || echo "")
          
          if [ -z "$TAGS" ]; then
            LATEST_VERSION=0
          else
            LATEST_VERSION=$(echo "$TAGS" | grep -oP '^v\K[0-9]+$' | sort -n | tail -1)
            if [ -z "$LATEST_VERSION" ]; then
              LATEST_VERSION=0
            fi
          fi
          
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "version=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Latest version: v${LATEST_VERSION}"
          echo "New version: v${NEW_VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.version }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}

      - name: Deploy using your deployment.yaml
        run: |
          # Replace variables in deployment.yaml
          sed -i "s|\${ACR_LOGIN_SERVER}|${{ env.ACR_LOGIN_SERVER }}|g" deployment.yaml
          sed -i "s|\${IMAGE_NAME}|${{ env.IMAGE_NAME }}|g" deployment.yaml
          sed -i "s|\${VERSION}|${{ steps.get-version.outputs.version }}|g" deployment.yaml
          
          # Apply the deployment
          kubectl apply -f deployment.yaml
          

      - name: Verify deployment
        run: |
          echo "Current deployment image:"
          kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -o jsonpath='{.spec.template.spec.containers[0].image}'
          echo ""
